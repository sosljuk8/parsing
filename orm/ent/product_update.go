// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"parsing/orm/ent/category"
	"parsing/orm/ent/page"
	"parsing/orm/ent/predicate"
	"parsing/orm/ent/product"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetSeries sets the "series" field.
func (pu *ProductUpdate) SetSeries(s string) *ProductUpdate {
	pu.mutation.SetSeries(s)
	return pu
}

// SetNillableSeries sets the "series" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSeries(s *string) *ProductUpdate {
	if s != nil {
		pu.SetSeries(*s)
	}
	return pu
}

// ClearSeries clears the value of the "series" field.
func (pu *ProductUpdate) ClearSeries() *ProductUpdate {
	pu.mutation.ClearSeries()
	return pu
}

// SetModel sets the "model" field.
func (pu *ProductUpdate) SetModel(s string) *ProductUpdate {
	pu.mutation.SetModel(s)
	return pu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableModel(s *string) *ProductUpdate {
	if s != nil {
		pu.SetModel(*s)
	}
	return pu
}

// ClearModel clears the value of the "model" field.
func (pu *ProductUpdate) ClearModel() *ProductUpdate {
	pu.mutation.ClearModel()
	return pu
}

// SetSku sets the "sku" field.
func (pu *ProductUpdate) SetSku(s string) *ProductUpdate {
	pu.mutation.SetSku(s)
	return pu
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableSku(s *string) *ProductUpdate {
	if s != nil {
		pu.SetSku(*s)
	}
	return pu
}

// ClearSku clears the value of the "sku" field.
func (pu *ProductUpdate) ClearSku() *ProductUpdate {
	pu.mutation.ClearSku()
	return pu
}

// SetProperties sets the "properties" field.
func (pu *ProductUpdate) SetProperties(m map[string]string) *ProductUpdate {
	pu.mutation.SetProperties(m)
	return pu
}

// ClearProperties clears the value of the "properties" field.
func (pu *ProductUpdate) ClearProperties() *ProductUpdate {
	pu.mutation.ClearProperties()
	return pu
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (pu *ProductUpdate) AddCategoryIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddCategoryIDs(ids...)
	return pu
}

// AddCategories adds the "categories" edges to the Category entity.
func (pu *ProductUpdate) AddCategories(c ...*Category) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCategoryIDs(ids...)
}

// SetPageID sets the "page" edge to the Page entity by ID.
func (pu *ProductUpdate) SetPageID(id int) *ProductUpdate {
	pu.mutation.SetPageID(id)
	return pu
}

// SetNillablePageID sets the "page" edge to the Page entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillablePageID(id *int) *ProductUpdate {
	if id != nil {
		pu = pu.SetPageID(*id)
	}
	return pu
}

// SetPage sets the "page" edge to the Page entity.
func (pu *ProductUpdate) SetPage(p *Page) *ProductUpdate {
	return pu.SetPageID(p.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearCategories clears all "categories" edges to the Category entity.
func (pu *ProductUpdate) ClearCategories() *ProductUpdate {
	pu.mutation.ClearCategories()
	return pu
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (pu *ProductUpdate) RemoveCategoryIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveCategoryIDs(ids...)
	return pu
}

// RemoveCategories removes "categories" edges to Category entities.
func (pu *ProductUpdate) RemoveCategories(c ...*Category) *ProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCategoryIDs(ids...)
}

// ClearPage clears the "page" edge to the Page entity.
func (pu *ProductUpdate) ClearPage() *ProductUpdate {
	pu.mutation.ClearPage()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Series(); ok {
		_spec.SetField(product.FieldSeries, field.TypeString, value)
	}
	if pu.mutation.SeriesCleared() {
		_spec.ClearField(product.FieldSeries, field.TypeString)
	}
	if value, ok := pu.mutation.Model(); ok {
		_spec.SetField(product.FieldModel, field.TypeString, value)
	}
	if pu.mutation.ModelCleared() {
		_spec.ClearField(product.FieldModel, field.TypeString)
	}
	if value, ok := pu.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
	}
	if pu.mutation.SkuCleared() {
		_spec.ClearField(product.FieldSku, field.TypeString)
	}
	if value, ok := pu.mutation.Properties(); ok {
		_spec.SetField(product.FieldProperties, field.TypeJSON, value)
	}
	if pu.mutation.PropertiesCleared() {
		_spec.ClearField(product.FieldProperties, field.TypeJSON)
	}
	if pu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.CategoriesTable,
			Columns: product.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !pu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.CategoriesTable,
			Columns: product.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.CategoriesTable,
			Columns: product.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.PageTable,
			Columns: []string{product.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.PageTable,
			Columns: []string{product.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetSeries sets the "series" field.
func (puo *ProductUpdateOne) SetSeries(s string) *ProductUpdateOne {
	puo.mutation.SetSeries(s)
	return puo
}

// SetNillableSeries sets the "series" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSeries(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetSeries(*s)
	}
	return puo
}

// ClearSeries clears the value of the "series" field.
func (puo *ProductUpdateOne) ClearSeries() *ProductUpdateOne {
	puo.mutation.ClearSeries()
	return puo
}

// SetModel sets the "model" field.
func (puo *ProductUpdateOne) SetModel(s string) *ProductUpdateOne {
	puo.mutation.SetModel(s)
	return puo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableModel(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetModel(*s)
	}
	return puo
}

// ClearModel clears the value of the "model" field.
func (puo *ProductUpdateOne) ClearModel() *ProductUpdateOne {
	puo.mutation.ClearModel()
	return puo
}

// SetSku sets the "sku" field.
func (puo *ProductUpdateOne) SetSku(s string) *ProductUpdateOne {
	puo.mutation.SetSku(s)
	return puo
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableSku(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetSku(*s)
	}
	return puo
}

// ClearSku clears the value of the "sku" field.
func (puo *ProductUpdateOne) ClearSku() *ProductUpdateOne {
	puo.mutation.ClearSku()
	return puo
}

// SetProperties sets the "properties" field.
func (puo *ProductUpdateOne) SetProperties(m map[string]string) *ProductUpdateOne {
	puo.mutation.SetProperties(m)
	return puo
}

// ClearProperties clears the value of the "properties" field.
func (puo *ProductUpdateOne) ClearProperties() *ProductUpdateOne {
	puo.mutation.ClearProperties()
	return puo
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (puo *ProductUpdateOne) AddCategoryIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddCategoryIDs(ids...)
	return puo
}

// AddCategories adds the "categories" edges to the Category entity.
func (puo *ProductUpdateOne) AddCategories(c ...*Category) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCategoryIDs(ids...)
}

// SetPageID sets the "page" edge to the Page entity by ID.
func (puo *ProductUpdateOne) SetPageID(id int) *ProductUpdateOne {
	puo.mutation.SetPageID(id)
	return puo
}

// SetNillablePageID sets the "page" edge to the Page entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePageID(id *int) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetPageID(*id)
	}
	return puo
}

// SetPage sets the "page" edge to the Page entity.
func (puo *ProductUpdateOne) SetPage(p *Page) *ProductUpdateOne {
	return puo.SetPageID(p.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearCategories clears all "categories" edges to the Category entity.
func (puo *ProductUpdateOne) ClearCategories() *ProductUpdateOne {
	puo.mutation.ClearCategories()
	return puo
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (puo *ProductUpdateOne) RemoveCategoryIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveCategoryIDs(ids...)
	return puo
}

// RemoveCategories removes "categories" edges to Category entities.
func (puo *ProductUpdateOne) RemoveCategories(c ...*Category) *ProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCategoryIDs(ids...)
}

// ClearPage clears the "page" edge to the Page entity.
func (puo *ProductUpdateOne) ClearPage() *ProductUpdateOne {
	puo.mutation.ClearPage()
	return puo
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Series(); ok {
		_spec.SetField(product.FieldSeries, field.TypeString, value)
	}
	if puo.mutation.SeriesCleared() {
		_spec.ClearField(product.FieldSeries, field.TypeString)
	}
	if value, ok := puo.mutation.Model(); ok {
		_spec.SetField(product.FieldModel, field.TypeString, value)
	}
	if puo.mutation.ModelCleared() {
		_spec.ClearField(product.FieldModel, field.TypeString)
	}
	if value, ok := puo.mutation.Sku(); ok {
		_spec.SetField(product.FieldSku, field.TypeString, value)
	}
	if puo.mutation.SkuCleared() {
		_spec.ClearField(product.FieldSku, field.TypeString)
	}
	if value, ok := puo.mutation.Properties(); ok {
		_spec.SetField(product.FieldProperties, field.TypeJSON, value)
	}
	if puo.mutation.PropertiesCleared() {
		_spec.ClearField(product.FieldProperties, field.TypeJSON)
	}
	if puo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.CategoriesTable,
			Columns: product.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !puo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.CategoriesTable,
			Columns: product.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.CategoriesTable,
			Columns: product.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.PageTable,
			Columns: []string{product.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.PageTable,
			Columns: []string{product.PageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
