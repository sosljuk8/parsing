// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"parsing/orm/ent/page"
	"parsing/orm/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PageUpdate is the builder for updating Page entities.
type PageUpdate struct {
	config
	hooks    []Hook
	mutation *PageMutation
}

// Where appends a list predicates to the PageUpdate builder.
func (pu *PageUpdate) Where(ps ...predicate.Page) *PageUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetBrand sets the "brand" field.
func (pu *PageUpdate) SetBrand(s string) *PageUpdate {
	pu.mutation.SetBrand(s)
	return pu
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (pu *PageUpdate) SetNillableBrand(s *string) *PageUpdate {
	if s != nil {
		pu.SetBrand(*s)
	}
	return pu
}

// SetDomain sets the "domain" field.
func (pu *PageUpdate) SetDomain(s string) *PageUpdate {
	pu.mutation.SetDomain(s)
	return pu
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (pu *PageUpdate) SetNillableDomain(s *string) *PageUpdate {
	if s != nil {
		pu.SetDomain(*s)
	}
	return pu
}

// SetJob sets the "job" field.
func (pu *PageUpdate) SetJob(s string) *PageUpdate {
	pu.mutation.SetJob(s)
	return pu
}

// SetNillableJob sets the "job" field if the given value is not nil.
func (pu *PageUpdate) SetNillableJob(s *string) *PageUpdate {
	if s != nil {
		pu.SetJob(*s)
	}
	return pu
}

// SetHTML sets the "html" field.
func (pu *PageUpdate) SetHTML(s string) *PageUpdate {
	pu.mutation.SetHTML(s)
	return pu
}

// SetNillableHTML sets the "html" field if the given value is not nil.
func (pu *PageUpdate) SetNillableHTML(s *string) *PageUpdate {
	if s != nil {
		pu.SetHTML(*s)
	}
	return pu
}

// SetCreated sets the "created" field.
func (pu *PageUpdate) SetCreated(t time.Time) *PageUpdate {
	pu.mutation.SetCreated(t)
	return pu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (pu *PageUpdate) SetNillableCreated(t *time.Time) *PageUpdate {
	if t != nil {
		pu.SetCreated(*t)
	}
	return pu
}

// SetUpdated sets the "updated" field.
func (pu *PageUpdate) SetUpdated(t time.Time) *PageUpdate {
	pu.mutation.SetUpdated(t)
	return pu
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (pu *PageUpdate) SetNillableUpdated(t *time.Time) *PageUpdate {
	if t != nil {
		pu.SetUpdated(*t)
	}
	return pu
}

// SetProcessed sets the "processed" field.
func (pu *PageUpdate) SetProcessed(t time.Time) *PageUpdate {
	pu.mutation.SetProcessed(t)
	return pu
}

// SetNillableProcessed sets the "processed" field if the given value is not nil.
func (pu *PageUpdate) SetNillableProcessed(t *time.Time) *PageUpdate {
	if t != nil {
		pu.SetProcessed(*t)
	}
	return pu
}

// ClearProcessed clears the value of the "processed" field.
func (pu *PageUpdate) ClearProcessed() *PageUpdate {
	pu.mutation.ClearProcessed()
	return pu
}

// SetURL sets the "url" field.
func (pu *PageUpdate) SetURL(s string) *PageUpdate {
	pu.mutation.SetURL(s)
	return pu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pu *PageUpdate) SetNillableURL(s *string) *PageUpdate {
	if s != nil {
		pu.SetURL(*s)
	}
	return pu
}

// Mutation returns the PageMutation object of the builder.
func (pu *PageUpdate) Mutation() *PageMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PageUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PageUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PageUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PageUpdate) check() error {
	if v, ok := pu.mutation.Brand(); ok {
		if err := page.BrandValidator(v); err != nil {
			return &ValidationError{Name: "brand", err: fmt.Errorf(`ent: validator failed for field "Page.brand": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Domain(); ok {
		if err := page.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Page.domain": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Job(); ok {
		if err := page.JobValidator(v); err != nil {
			return &ValidationError{Name: "job", err: fmt.Errorf(`ent: validator failed for field "Page.job": %w`, err)}
		}
	}
	if v, ok := pu.mutation.HTML(); ok {
		if err := page.HTMLValidator(v); err != nil {
			return &ValidationError{Name: "html", err: fmt.Errorf(`ent: validator failed for field "Page.html": %w`, err)}
		}
	}
	if v, ok := pu.mutation.URL(); ok {
		if err := page.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Page.url": %w`, err)}
		}
	}
	return nil
}

func (pu *PageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(page.Table, page.Columns, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Brand(); ok {
		_spec.SetField(page.FieldBrand, field.TypeString, value)
	}
	if value, ok := pu.mutation.Domain(); ok {
		_spec.SetField(page.FieldDomain, field.TypeString, value)
	}
	if value, ok := pu.mutation.Job(); ok {
		_spec.SetField(page.FieldJob, field.TypeString, value)
	}
	if value, ok := pu.mutation.HTML(); ok {
		_spec.SetField(page.FieldHTML, field.TypeString, value)
	}
	if value, ok := pu.mutation.Created(); ok {
		_spec.SetField(page.FieldCreated, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Updated(); ok {
		_spec.SetField(page.FieldUpdated, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Processed(); ok {
		_spec.SetField(page.FieldProcessed, field.TypeTime, value)
	}
	if pu.mutation.ProcessedCleared() {
		_spec.ClearField(page.FieldProcessed, field.TypeTime)
	}
	if value, ok := pu.mutation.URL(); ok {
		_spec.SetField(page.FieldURL, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PageUpdateOne is the builder for updating a single Page entity.
type PageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageMutation
}

// SetBrand sets the "brand" field.
func (puo *PageUpdateOne) SetBrand(s string) *PageUpdateOne {
	puo.mutation.SetBrand(s)
	return puo
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableBrand(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetBrand(*s)
	}
	return puo
}

// SetDomain sets the "domain" field.
func (puo *PageUpdateOne) SetDomain(s string) *PageUpdateOne {
	puo.mutation.SetDomain(s)
	return puo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableDomain(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetDomain(*s)
	}
	return puo
}

// SetJob sets the "job" field.
func (puo *PageUpdateOne) SetJob(s string) *PageUpdateOne {
	puo.mutation.SetJob(s)
	return puo
}

// SetNillableJob sets the "job" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableJob(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetJob(*s)
	}
	return puo
}

// SetHTML sets the "html" field.
func (puo *PageUpdateOne) SetHTML(s string) *PageUpdateOne {
	puo.mutation.SetHTML(s)
	return puo
}

// SetNillableHTML sets the "html" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableHTML(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetHTML(*s)
	}
	return puo
}

// SetCreated sets the "created" field.
func (puo *PageUpdateOne) SetCreated(t time.Time) *PageUpdateOne {
	puo.mutation.SetCreated(t)
	return puo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableCreated(t *time.Time) *PageUpdateOne {
	if t != nil {
		puo.SetCreated(*t)
	}
	return puo
}

// SetUpdated sets the "updated" field.
func (puo *PageUpdateOne) SetUpdated(t time.Time) *PageUpdateOne {
	puo.mutation.SetUpdated(t)
	return puo
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableUpdated(t *time.Time) *PageUpdateOne {
	if t != nil {
		puo.SetUpdated(*t)
	}
	return puo
}

// SetProcessed sets the "processed" field.
func (puo *PageUpdateOne) SetProcessed(t time.Time) *PageUpdateOne {
	puo.mutation.SetProcessed(t)
	return puo
}

// SetNillableProcessed sets the "processed" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableProcessed(t *time.Time) *PageUpdateOne {
	if t != nil {
		puo.SetProcessed(*t)
	}
	return puo
}

// ClearProcessed clears the value of the "processed" field.
func (puo *PageUpdateOne) ClearProcessed() *PageUpdateOne {
	puo.mutation.ClearProcessed()
	return puo
}

// SetURL sets the "url" field.
func (puo *PageUpdateOne) SetURL(s string) *PageUpdateOne {
	puo.mutation.SetURL(s)
	return puo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableURL(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetURL(*s)
	}
	return puo
}

// Mutation returns the PageMutation object of the builder.
func (puo *PageUpdateOne) Mutation() *PageMutation {
	return puo.mutation
}

// Where appends a list predicates to the PageUpdate builder.
func (puo *PageUpdateOne) Where(ps ...predicate.Page) *PageUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PageUpdateOne) Select(field string, fields ...string) *PageUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Page entity.
func (puo *PageUpdateOne) Save(ctx context.Context) (*Page, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PageUpdateOne) SaveX(ctx context.Context) *Page {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PageUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PageUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PageUpdateOne) check() error {
	if v, ok := puo.mutation.Brand(); ok {
		if err := page.BrandValidator(v); err != nil {
			return &ValidationError{Name: "brand", err: fmt.Errorf(`ent: validator failed for field "Page.brand": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Domain(); ok {
		if err := page.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Page.domain": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Job(); ok {
		if err := page.JobValidator(v); err != nil {
			return &ValidationError{Name: "job", err: fmt.Errorf(`ent: validator failed for field "Page.job": %w`, err)}
		}
	}
	if v, ok := puo.mutation.HTML(); ok {
		if err := page.HTMLValidator(v); err != nil {
			return &ValidationError{Name: "html", err: fmt.Errorf(`ent: validator failed for field "Page.html": %w`, err)}
		}
	}
	if v, ok := puo.mutation.URL(); ok {
		if err := page.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Page.url": %w`, err)}
		}
	}
	return nil
}

func (puo *PageUpdateOne) sqlSave(ctx context.Context) (_node *Page, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(page.Table, page.Columns, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Page.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, page.FieldID)
		for _, f := range fields {
			if !page.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != page.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Brand(); ok {
		_spec.SetField(page.FieldBrand, field.TypeString, value)
	}
	if value, ok := puo.mutation.Domain(); ok {
		_spec.SetField(page.FieldDomain, field.TypeString, value)
	}
	if value, ok := puo.mutation.Job(); ok {
		_spec.SetField(page.FieldJob, field.TypeString, value)
	}
	if value, ok := puo.mutation.HTML(); ok {
		_spec.SetField(page.FieldHTML, field.TypeString, value)
	}
	if value, ok := puo.mutation.Created(); ok {
		_spec.SetField(page.FieldCreated, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Updated(); ok {
		_spec.SetField(page.FieldUpdated, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Processed(); ok {
		_spec.SetField(page.FieldProcessed, field.TypeTime, value)
	}
	if puo.mutation.ProcessedCleared() {
		_spec.ClearField(page.FieldProcessed, field.TypeTime)
	}
	if value, ok := puo.mutation.URL(); ok {
		_spec.SetField(page.FieldURL, field.TypeString, value)
	}
	_node = &Page{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
